openapi: 3.0.2
info:
  version: 0.0.2
  title: Arclytics Sim API
  description: Swagger spec for documenting the users and simulation service
servers:
  - description: Users Service Flask Server
    url: 'http://localhost:8000'
  - description: SimCCT Service Flask Server
    url: 'http://localhost:8001'
paths:
  /ping:
    get:
      summary: Just a sanity check
      responses:
        '200':
          description: You are not crazy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The status of `success` or `fail`.
                  message:
                    type: string
                    description: The message response
              example:
                status: success
                message: pong!
  # TODO:
  /users:
    get:
      summary: Returns all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: user object
        '400':
          description: The request parameters are bad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                    example: fail
                  message:
                    type: string
                    format: string
                    example: Provide a valid JWT auth token.
        '401':
          description: The user is not authenticated to perform this request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                  message:
                    type: string
                    format: string
              examples:
                'Not Logged In':
                  value:
                    status: fail
                    message: Admin must sign in again.
                'Expired Token':
                  value:
                    status: fail
                    message: Signature expired. Please login again.
                'Invalid Token':
                  value:
                    status: fail
                    message: Invalid token. Please log in again.
        '403':
          description: Unauthorized access to endpoint.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              examples:
                'Non Admin User':
                  value:
                    status: fail
                    message: Not authorized.
  '/users/{id}':
    get:
      summary: Returns a user based on a single user ID
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: string
            format: bytes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        '400':
          description: The request parameters are bad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                    example: fail
                  message:
                    type: string
                    format: string
                    example: Provide a valid JWT auth token.
        '401':
          description: The user is not authenticated to perform this request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                  message:
                    type: string
                    format: string
              examples:
                'Not Logged In':
                  value:
                    status: fail
                    message: User must sign in again.
                'Expired Token':
                  value:
                    status: fail
                    message: Signature expired. Please login again.
                'Invalid Token':
                  value:
                    status: fail
                    message: Invalid token. Please log in again.
  /auth/register:
    post:
      summary: Register and create a new user
      requestBody:
        description: User details to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
              required:
                - email
                - password
                - first_name
                - last_name
                - username
      responses:
        '200':
          description: user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  #TODO:
  /auth/login:
    post:
      summary: Logs a user in
      requestBody:
        description: User to log in
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: tony@avengers.io
              password: IAmIronMan
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT Token
                  message:
                    type: string
                    description: The message response
              example:
                token: 5d21ae0591d133a14725ad6c
                message: Successfully logged in.
  # TODO:
  /auth/status:
    get:
      summary: Returns the logged in user's status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: api.models.User object
  # TODO:
  /auth/logout:
    get:
      summary: Logs a user out
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    user:
      properties:
        _id:
          type: string
          format: byte
          required: false
          readOnly: true
          uniqueItems: true
        email:
          type: string
          format: email
          required: true
          uniqueItems: true
          example: tony@avengers.io
        password:
          type: string
          format: password
          required: true
          minLength: 6
          maxLength: 255
          uniqueItems: false
          writeOnly: true
        first_name:
          type: string
          required: true
          maxLength: 255
          example: Tony
        last_name:
          type: string
          required: true
          maxLength: 255
          example: Stark
        username:
          type: string
          required: true
          minLength: 1
          maxLength: 180
          example: iron_man
        user_type:
          type: string
          format: int32
          required: false
          maxLength: 1
          example: '2'
          default: '2'
        active:
          type: boolean
          required: false
          readOnly: true
          default: true
        admin:
          type: boolean
          required: false
          default: false
        created:
          type: string
          format: date-time
          required: false
        verified:
          type: boolean
          required: false
          default: false
        last_updated:
          type: string
          format: date-time
          required: false
        last_login:
          type: string
          format: date-time
          required: false
