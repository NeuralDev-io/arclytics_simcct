openapi: 3.0.2
info:
  version: 0.0.2
  title: Arclytics Sim API
  description: Swagger spec for documenting the users and simulation service

servers:
  - description: Users Service Flask Server
    url: 'http://localhost:8000'
  - description: SimCCT Service Flask Server
    url: 'http://localhost:8001'

paths:
  /ping:
    get:
      summary: Just a sanity check
      tags:
        - Users
      responses:
        '200':
          description: You are not crazy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The status of `success` or `fail`.
                  message:
                    type: string
                    description: The message response
              example:
                status: success
                message: pong!
  /users:
    get:
      summary: Returns all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of User objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                example:
                  - _id: 5d2339db2d789ae1a9f15a9e
                    email: iron_man@avengers.io
                    first_name: Tony
                    last_name: Stark
                    active: true
                    admin: true
                    created: '2019-07-08T12:40:55.948000+00:00'
                    last_updated: '2019-07-08T12:40:55.948000+00:00'
                    last_login: '2019-07-08T12:40:59.168000+00:00'
                    profile: None
                  - _id: 5d2339db2d789ae1a9f15a9f
                    email: captain_america@avengers.io
                    first_name: Steve
                    last_name: Rogers
                    active: false
                    admin: false
                    created: '2019-07-08T12:40:55.948000+00:00'
                    last_updated: '2019-07-08T12:40:55.948000+00:00'
                    last_login: None
                    profile: None
                  - _id: 5d2339db2d789ae1a9f15aa0
                    email: black_widow@avengers.io
                    first_name: Natasha
                    last_name: Romanoff
                    active: false
                    admin: false
                    verified: true
                    created: '2019-07-08T12:40:55.948000+00:00'
                    last_updated: '2019-07-08T12:40:55.948000+00:00'
                    last_login: None
                    profile: None
        '400':
          description: The request parameters are bad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                    example: fail
                  message:
                    type: string
                    format: string
                    example: Provide a valid JWT auth token.
        '401':
          description: The user is not authenticated to perform this request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                  message:
                    type: string
                    format: string
              examples:
                'Not Logged In':
                  value:
                    status: fail
                    message: Admin must sign in again.
                'Expired Token':
                  value:
                    status: fail
                    message: Signature expired. Please login again.
                'Invalid Token':
                  value:
                    status: fail
                    message: Invalid token. Please log in again.
        '403':
          description: Unauthorized access to endpoint.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              examples:
                'Non Admin User':
                  value:
                    status: fail
                    message: Not authorized.
  '/users/{id}':
    get:
      summary: Returns a user based on a single user ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: string
            format: bytes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: The request parameters are bad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                    example: fail
                  message:
                    type: string
                    format: string
                    example: Provide a valid JWT auth token.
        '401':
          description: The user is not authenticated to perform this request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                  message:
                    type: string
                    format: string
              examples:
                'Not Logged In':
                  value:
                    status: fail
                    message: User must sign in again.
                'Expired Token':
                  value:
                    status: fail
                    message: Signature expired. Please login again.
                'Invalid Token':
                  value:
                    status: fail
                    message: Invalid token. Please log in again.
  /auth/register:
    post:
      summary: Register and create a new user
      tags:
        - Auth
      requestBody:
        description: User details to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
              required:
                - email
                - password
                - first_name
                - last_name
            examples:
              'Thor':
                value:
                  email: thor@avengers.io
                  first_name: Thor
                  last_name: Odinson
                  password: StrongestAvenger
      responses:
        '200':
          description: user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User has been registered
                  token:
                    type: string
                    format: byte
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NjI1OTAzOTYsImlhdCI6MTU2MjU5MDM5MSwic3ViIjoiNWQyMzNjYjcxODE3YjIwNzU5NjZkNWJiIn0.SNRHYOgw2jAkIVWkuWA0a_PXu9S_QGcb2W7wrvXlqQk
        '400':
          description: Invalid payload in request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                'Bad Request Body':
                  value:
                    status: fail
                    message: Invalid payload.
                'No Email':
                  value:
                    status: fail
                    message: A user account must have an email.
                'No Password':
                  value:
                    status: fail
                    message: A user account must have a password.
                'Invalid Password':
                  value:
                    status: fail
                    message: The password is invalid.
                'Duplicate User':
                  value:
                    status: fail
                    message: This user already exists.
                'Validation Error on Backend':
                  value:
                    status: fail
                    message: This user cannot be validated.
                'Unique Consistency Error':
                  value:
                    status: fail
                    message: The user details already exists.

  /auth/login:
    post:
      summary: Logs a user in
      tags:
        - Auth
      requestBody:
        description: User to log in
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: tony@avengers.io
              password: IAmIronMan
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The JWT Token
                  message:
                    type: string
                    description: The message response
              example:
                status: fail
                message: User does not exist.
        default:
          description: Something went wrong with validating details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                value:
                  status: fail
                  message: Email or password combination incorrect.

  /auth/status:
    get:
      summary: Returns the logged in user's status
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Response status and the user details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/User'
              example:
                status: success
                data:
                  _id: 5d2340060f8b5fa4a8daca91
                  email: scarlet_witch@avengers.io
                  first_name: Wanda
                  last_name: Maximoff
                  active: true
                  admin: false
                  verified: false
                  created: '2019-07-08T13:07:16.080000+00:00'
                  last_updated: '2019-07-08T13:07:16.080000+00:00'
                  last_login: '2019-07-08T13:07:18.042000+00:00'
                  profile: None
        '400':
          description: Bad request body provided with no JSON Web Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                'No Auth Header':
                  value:
                    status: fail
                    message: Provide a valid JWT auth token.
        '401':
          description: The user is not authenticated to perform this request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    format: string
                  message:
                    type: string
                    format: string
              examples:
                'Non Active User':
                  value:
                    status: fail
                    message: This user does not exist.
                'Expired Token':
                  value:
                    status: fail
                    message: Signature expired. Please login again.
                'Invalid Token':
                  value:
                    status: fail
                    message: Invalid token. Please log in again.

  /auth/logout:
    get:
      summary: Logs a user out
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out

  /users/ping:
    get:
      summary: Just a sanity check that simcct-server can sanely connect to users-server.
      tags:
        - Sessions
      responses:
        '200':
          description: You are not crazy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The status of `success` or `fail`.
                  message:
                    type: string
                    description: The message response
              example:
                status: success
                message: pong!

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer


  schemas:
    User:
      properties:
        _id:
          type: string
          format: byte
          readOnly: true
          uniqueItems: true
        email:
          type: string
          format: email
          uniqueItems: true
          example: iron_man@avengers.io
        password:
          type: string
          format: password
          minLength: 6
          maxLength: 255
          uniqueItems: false
          writeOnly: true
        first_name:
          type: string
          maxLength: 255
          example: Tony
        last_name:
          type: string
          maxLength: 255
          example: Stark
        user_type:
          type: string
          format: int32
          maxLength: 1
          example: '2'
          default: '2'
        active:
          type: boolean
          readOnly: true
          default: true
        admin:
          type: boolean
          default: false
        created:
          type: string
          format: date-time
        verified:
          type: boolean
          default: false
        last_updated:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
        profile:
          $ref: '#/components/schemas/UserProfile'
        admin_profile:
          $ref: '#/components/schemas/AdminProfile'
      required:
        - email
        - password
        - first_name
        - last_name
    UserProfile:
      type: object
      properties:
        aim:
          description: What sentene best describes you?
          type: string
          format: string
        highest_education:
          description: What is the highest level of education have you studied?
          type: string
          format: string
        sci_tech_exp:
          description: What is your experience with scientific software?
          type: string
          format: string
        phase_transform_exp:
          description: What is your experience with solid-state phse transformation?
          type: string
          format: string
    AdminProfile:
      properties:
        mobile_number:
          type: string
          format: string
          maxLength: 10
          minLength: 10
        position:
          type: string
          format: string
    Response:
      properties:
        status:
          type: string
          format: string
          example:
            - fail
            - success
        message:
          type: string
          format: string
    Configuration:
      type: object
      properties:
        method:
          description: A string that is a choice of either of the following enums [Li98 | Kirkaldy83]
          type: string
          format: string
          enum:
            - 'Li98'
            - 'Kirkaldy83'
        alloy:
          description: A string that is a choice of either of the following enums [parent | weld | mix]
          type: string
          format: string
          enum:
            - 'parent'
            - 'weld'
            - 'mix'
        grain_size_type:
          description: A string that is a choice of either of the following enums [ASTM | diam]
          type: string
          format: string
          enum:
            - 'ASTM'
            - 'diam'
        gran_size:
          type: number
          format: double
        nucleation_start:
          type: number
          format: double
        nucleation_finish:
          type: number
          format: double
          maximum: 99.99999999
        auto_calculate_xfe:
          type: boolean
          default: true
        xfe_value:
          type: number
          format: double
        cf_value:
          type: number
          format: double
        ceut_value:
          type: number
          format: double
        auto_calculate_ms_bs:
          type: boolean
          default: true
        transformation_method:
          description: A string that is a choice of either of the following enums [Li98 | Kirkaldy83]
          type: string
          format: string
          enum:
            - 'Li98'
            - 'Kirkaldy83'
        ms_temp:
          type: number
          format: double
        ms_undercool:
          type: number
          format: double
        bs_temp:
          type: number
          format: double
        auto_calculate_ae:
          type: boolean
          default: true
        ae1_temp:
          type: number
          format: double
        ae3_temp:
          type: number
          format: double
        start_temp:
          type: integer
        cct_cooling_rate:
          type: integer
    Element:
      type: object
      properties:
        name:
          description: A lowercase full name of the element.
          type: string
          format: string
          example:
            - carbon
            - manganese
            - silicon
            - nickel
            - chromium
            - molybdenum
            - aluminium
            - copper
            - tungsten
            - iron
        symbol:
          description: "A 2-character lowercase symbol for the name of the element. Note if the periodic symbol is 1
           letter, add an 'x' at the end of the character (i.e. carbon, c becomes cx)."
          type: string
          format: string
          maxLength: 2
          example:
            - cx
            - mn
            - si
            - ni
            - cr
            - mo
            - al
            - cu
            - wx
            - fe
        weight:
          description: The weight of the element in the alloy.
          type: number
          format: double
          example:
            - 0.044
            - 1.73
            - 0.22
            - 0.0
            - 0.0
            - 0.26
            - 0.0
            - 0.0
            - 0.0
            - 0.0
    Compositions:
      type: object
      properties:
        comp:
          description: A list of element objects as the composition.
          type: array
          items:
            $ref: '#/components/schemas/Element'

tags:
  - name: Users
    description: Endpoints for users and admins.
  - name: Auth
    description: Endpoints for Authentication and Authorization.
  - name: Sessions
    description: Endpoints that manage sessions.
