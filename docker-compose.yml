
version: '3.7'

services:

  users:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    image: neuraldev/arc_sim_users_service:1.0
    volumes:  # used to mount the code into the container for live updates
      - ./services/users:/usr/src/app
    ports:
      - 8000:8000
    expose:
      - 8000
    environment:
      - FLASK_ENV=development
      - APP_SETTINGS=configs.flask_conf.DevelopmentConfig
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_URI=mongodb://mongodb:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SIMCCT_HOST=simcct:8001
      - CLIENT_HOST=client:3000
    depends_on:
      - mongodb
      - redis
      - celery-worker
    networks:
      - host

  celery-worker:
    build:
      context: ./services/celery-worker
      dockerfile: Dockerfile
    image: neuraldev/arc_sim_celery_service:1.0
    volumes:
      - ./services/celery-worker:/usr/src/app
    ports:
      - 5555:5555  # Flower Web GUI management of Celery
    expose:
      - 5555
    environment:
      - C_FORCE_ROOT=true
      - FLASK_ENV=development
      - APP_SETTINGS=flask_conf.DevelopmentConfig
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    networks:
      - host

  simcct:
    build:
      context: ./services/simcct
      dockerfile: Dockerfile
    image: neuraldev/arc_simcct_service:1.2
    volumes:
      - ./services/simcct:/usr/src/app
    ports:
      - 8001:8001
    expose:
      - 8001
    environment:
      - FLASK_APP=sim_app/app.py
      - FLASK_ENV=development
      - APP_SETTINGS=configs.flask_conf.DevelopmentConfig
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USERS_HOST=users:8000
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_URI=mongodb://mongodb:27017
      - DASK_SCHEDULER_ADDRESS=tcp://dask-scheduler:8786
    depends_on:
      - redis
      - dask-scheduler
    networks:
      - host

  dask-scheduler:
    build:
      context: ./services/dask
      dockerfile: Dockerfile
    image: neuraldev/arc_dask_scheduler:1.0
    hostname: dask-scheduler
    ports:
      - 8786:8786
      - 8787:8787
    expose:
      - 8786
      - 8787
    # Entrypoint command needs to be set here because Dockerfile shared with `dask-worker`
    command: ['dask-scheduler']
    networks:
      - host

  dask-worker:
    build:
      context: ./services/dask
      dockerfile: Dockerfile
    image: neuraldev/arc_dask_worker:1.0
    # container_name: arc-dask-worker  # Cannot use for scaling
    hostname: dask-worker
    command: ['dask-worker', 'tcp://dask-scheduler:8786']
    networks:
      - host

  jupyter:
    build:
      context: ./services/jupyter
      dockerfile: Dockerfile
    image: neuraldev/arc_dask_notebook:1.0
    hostname: jupyter
    volumes:
      - ./services/jupyter:/home/arclytics/
    ports:
      - 8888:8888
    expose:
      - 8888
    environment:
      - NB_USER=arclytics
      - DASK_SCHEDULER_ADDRESS=tcp://dask-scheduler:8786
    networks:
      - host

  redis:
    build:
      context: ./services/redis
      dockerfile: Dockerfile
    image: neuraldev/arc_sim_redis:1.0
    restart: always
    ports:
      - 6379:6379
    expose:
      - 6379
    networks:
      - host

  mongodb:
    build:
      context: ./services/db
      dockerfile: Dockerfile
    image: neuraldev/arc_sim_mongo:1.1
    restart: always
    ports:
      - 27017:27017
    expose:
      - 27017
    environment:
      - MONGO_DATA_DIR=/usr/data/db
      - MONGO_LOG_DIR=/dev/null
    networks:
      - host

  client:
    build:
      context: ./services/client
      dockerfile: Dockerfile
    image: neuraldev/arc_sim_client:1.1
    volumes:
      - ./services/client:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3000:3000
    expose:
      - 3000
    environment:
      - NODE_ENV=development
    depends_on:
      - users
      - mongodb
    links:
      - users
      - simcct
    networks:
      - host

  swagger:
    build:
      context: ./services/swagger
      dockerfile: Dockerfile
    image: neuraldev/arc_sim_swagger:1.0
    volumes:
      - ./services/swagger/swagger.yaml:/usr/share/nginx/html/swagger.yaml
    ports:
      - 3001:8080  # expose ports - HOST:CONTAINER
    expose:
      - 3001
    environment:
      - URL=swagger.yaml
    networks:
      - host

networks:
  host:
