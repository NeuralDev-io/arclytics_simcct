
version: '3.7'

services:

  arclytics:
    build:
      context: ./services/arclytics
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_sim_flask_service:1.0
    volumes:  # used to mount the code into the container for live updates
#      - arclytics_dir:/usr/src/app  # This would be using a bind named volume mount
      - ./services/arclytics:/usr/src/app  # This is a bind mount
    ports:
      - "8000:8000"
    expose:
      - 8000
    environment:
      - FLASK_APP=arc_app/app.py
      - FLASK_ENV=development
      - APP_SETTINGS=configs.flask_conf.DevelopmentConfig
      - SECRET_KEY=${SECRET_KEY}
      - SECURITY_PASSWORD_SALT=${SECURITY_PASSWORD_SALT}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_APP_DB=arc_dev
      - MONGO_APP_USER=${MONGO_APP_USER}
      - MONGO_APP_USER_PASSWORD=${MONGO_APP_USER_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - SIMCCT_HOST=simcct:8001
      - CLIENT_HOST=client:3000
      - DASK_SCHEDULER_ADDRESS=tcp://dask-scheduler:8786
    depends_on:
      - mongodb
      - redis
    networks:
      - host

  simcct:
    build:
      context: ./services/simcct
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_simcct_service:1.3
    volumes:
      - ./services/simcct:/usr/src/app
    ports:
      - 8001:8001
    expose:
      - 8001
    environment:
      - FLASK_APP=sim_app/app.py
      - FLASK_ENV=development
      - APP_SETTINGS=configs.flask_conf.DevelopmentConfig
      - SECRET_KEY=${SECRET_KEY}
      - SECURITY_PASSWORD_SALT=${SECURITY_PASSWORD_SALT}
      - USERS_HOST=arclytics:8000
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_APP_DB=arc_dev
      - MONGO_APP_USER=${MONGO_APP_USER}
      - MONGO_APP_USER_PASSWORD=${MONGO_APP_USER_PASSWORD}
      - DASK_SCHEDULER_ADDRESS=tcp://dask-scheduler:8786
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    networks:
      - host

  dask-scheduler:
    build:
      context: ./services/dask
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_dask_scheduler:1.0
    hostname: dask-scheduler
    ports:
      - 8786:8786
      - 8787:8787
    expose:
      - 8786
      - 8787
    # Entrypoint command needs to be set here because Dockerfile shared with `dask-worker`
    command: ['dask-scheduler']
    networks:
      - host

  dask-worker:
    build:
      context: ./services/dask
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_dask_worker:1.0
    # container_name: arc-dask-worker  # Cannot use for scaling
    hostname: dask-worker
    command: ['dask-worker', 'tcp://dask-scheduler:8786']
    networks:
      - host

  jupyter:
    build:
      context: ./services/jupyter
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_dask_notebook:1.0
    domainname: io.arclytics.app
    hostname: jupyter
    volumes:
#      - ./services/jupyter:/home/arclytics/
#      - jupyter_notebooks_dir:/home/arclytics/
      - type: bind
        source: ./services/jupyter
        target: /home/arclytics/
    ports:
      - 8888:8888
    expose:
      - 8888
    environment:
      - NB_USER=arclytics
      - DASK_SCHEDULER_ADDRESS=tcp://dask-scheduler:8786
    depends_on:
      - dask-scheduler
      - dask-worker
    networks:
      - host

  redis:
    build:
      context: ./services/redis
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_sim_redis:1.1
    restart: always
    ports:
      - 6379:6379
    expose:
      - 6379
    networks:
      - host

  mongodb:
    build:
      context: ./services/db
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_sim_mongo:1.1
    restart: always
    ports:
      - 27017:27017
    expose:
      - 27017
    environment:
      - MONGO_DATA_DIR=/usr/data/db
      - MONGO_LOG_DIR=/dev/null
    networks:
      - host

  client:
    build:
      context: ./services/client
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_sim_client:1.1
    volumes:
      - ./services/client:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3000:3000
    expose:
      - 3000
    environment:
      - NODE_ENV=development
      - REACT_APP_USER_HOST=http://0.0.0.0:8000
      - REACT_APP_SIMCCT_HOST=http://0.0.0.0:8001
    depends_on:
      - mongodb
    networks:
      - host

  fluentd:
    build:
      context: ./services/fluentd
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_fluentd:0.9
    restart: always
    ports:
      - 24224:24224
      - 24224:24224/udp
      - 9880:9880
    expose:
      - 24224
      - 9880
    volumes:
      - ./services/fluentd/logs:/fluentd/log
    networks:
      - host

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.1
    ports:
      - 9200:9200
    expose:
      - 9200
    environment:
      - discovery.type=single-node
    networks:
      - host

  kibana:
    image: docker.elastic.co/kibana/kibana:7.3.1
    ports:
      - 5601:5601
    links:
      - elasticsearch
    networks:
      - host

  fluent-python:
    build:
      context: ./services/fluent-python
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_fluent_python:1.0
    ports:
      - 5005:5000
    expose:
      - 5005
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: fluent-python.access
    environment:
      - FLUENT_HOST=fluentd
    depends_on:
      - fluentd
    networks:
      - host

  fluent-react:
    build:
      context: ./services/fluent-react
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_fluent_react:1.0
    ports:
      - 80:80
    expose:
      - 80
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: fluent-react.access
    depends_on:
      - fluentd
    networks:
      - host

  swagger:
    build:
      context: ./services/swagger
      dockerfile: Dockerfile
      labels:
        arclytics.io: "development"
    image: neuraldev/arc_sim_swagger:1.0
    ports:
      - 3001:8080  # expose ports - HOST:CONTAINER
    expose:
      - 3001
    environment:
      - URL=swagger.yaml
    networks:
      - host

networks:
  host:
    driver: bridge
    labels:
      arclytics.io: "development"

# https://docs.docker.com/compose/compose-file/#volume-configuration-reference
#
#volumes:
  # TODO(andrew@neuraldev.io):
  #  This is not working as a dir needs to be created
  #  since Docker creates a Volume in /var/lib/docker/volumes/vol_name/_data
  #  which is an abstraction layer that gets bound to the Docker container.
#  arclytics_dir:
#    labels:
#      arclytics.io: "development"
#    driver: local
#    driver_opts:
#      device: "./services/users"
#      type: none
#      o: bind
#  jupyter_notebooks_dir:
#    labels:
#      arclytics.io: "development"
#    driver: local
#    driver_opts:
#      device: "./services/jupyter"
#      type: none
#      o: bind
